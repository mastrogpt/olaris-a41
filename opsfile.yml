version: 3

tasks:

  cli:
    silent: true
    desc: cli
    env:
      IPYTHONDIR:
        sh: realpath .
    dir: cli
    cmds:
      - |
        if ! test -d .venv
        then uv venv
             uv pip install -r requirements.in
        fi
      - |
        set -a
        test -e $OPS_PWD/.env && source $OPS_PWD/.env
        test -e $OPS_PWD/tests/.env && source $OPS_PWD/tests/.env
        export PYTHONPATH="$OPS_PWD/packages:$PWD:$PYTHONPATH"
        cat $OPS_PWD/packages/*/*/requirements.txt >requirements.txt
        uv pip install -r requirements.txt 
        if test -z "{{._function_}}"
        then uv run ipython
        else uv run ipython -m '{{._function_ | replace  "/" "."}}'
        fi

  new:
    silent: true
    desc: generate a new python action
    vars:
       ACTION: 
         sh: echo  "{{._action_}}" | cut -d/ -f2
       PACKAGE: 
         sh: echo  "{{._action_}}" | cut -d/ -f1
    env:
       ACTION: "{{.ACTION}}"
       PACKAGE: "{{.PACKAGE}}"
       DIR:  "packages/{{.PACKAGE}}/{{.ACTION}}"
       FILE: "packages/{{.PACKAGE}}/{{.ACTION}}/{{.ACTION}}.py"
    cmds:
    #- test ! -e "$OPS_PWD/$FILE" || die "file already exists"
    - echo $ACTION
    - echo $PACKAGE
    - echo $DIR
    - echo $FILE
    - |
      mkdir -p $OPS_PWD/tests/$PACKAGE
      mkdir -p $OPS_PWD/$DIR
    - |
      cat <<EOF >$OPS_PWD/$FILE
      def $ACTION(args):
        return { "output": "$ACTION" }
      EOF
    - |
      cat <<EOF >$OPS_PWD/$DIR/__main__.py
      #--kind python:default
      #--web true
      import $ACTION
      def main(args):
        return { "body": $ACTION.$ACTION(args) }
      EOF
    - |
      cat <<EOF >$OPS_PWD/tests/$PACKAGE/test_${ACTION}.py
      import sys 
      sys.path.append("$DIR")
      import $ACTION
      
      def test_$ACTION():
          res = $ACTION.$ACTION({})
          assert res["output"] == "$ACTION"
      EOF
    - |
      cat <<EOF >$OPS_PWD/tests/$PACKAGE/test_${ACTION}_int.py
      import os, requests as req
      def test_$ACTION():
          url = os.environ.get("OPSDEV_HOST") + "/api/my/$PACKAGE/$ACTION"
          res = req.get(url).json()
          assert res.get("output") == "$ACTION"
      EOF


  pg:
    desc: postgres 
    
  etc:
    desc: miscellaneous 

  mcp:
    desc: mcp

  imp:
    desc: imp
