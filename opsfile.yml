version: 3

dotenv:
  - '{{.OPS_PWD}}/.env'

tasks:

  pg:
    desc: postgres 
    
  etc:
    desc: miscellaneous 

  mcp:
    desc: mcp

  imp:
    desc: imp

  sv:
    desc: sv

  ai:
    desc: ai utils

  cli:
    silent: false
    desc: cli
    env:
      IPYTHONDIR:
        sh: realpath .
    dir: cli
    cmds:
      - |
        if ! test -d .venv
        then uv venv --seed
             export VIRTUAL_ENV="$PWD/.venv"
             uv pip install -r requirements.in
        fi
      - |
        set -a
        test -e $OPS_PWD/.env && source $OPS_PWD/.env
        test -e $OPS_PWD/tests/.env && source $OPS_PWD/tests/.env
        export PYTHONPATH="$OPS_PWD/packages:$PWD:$PYTHONPATH"
        export VIRTUAL_ENV="$PWD/.venv"
        if test -e $OPS_PWD/requirements.txt
        then uv pip install -r $OPS_PWD/requirements.txt 
        fi
        if test -z "{{._function_}}"
        then uv run ipython
        else uv run ipython -m '{{._function_ | replace  "/" "."}}'
        fi

  new:
    silent: true
    desc: generate a new python action
    vars:
       ACTION: 
         sh: echo  "{{._action_}}" | cut -d/ -f2
       PACKAGE: 
         sh: echo  "{{._action_}}" | cut -d/ -f1
    env:
       ACTION: "{{.ACTION}}"
       PACKAGE: "{{.PACKAGE}}"
       DIR:  "packages/{{.PACKAGE}}/{{.ACTION}}"
       FILE: "packages/{{.PACKAGE}}/{{.ACTION}}/{{.ACTION}}.py"
    cmds:
    #- test ! -e "$OPS_PWD/$FILE" || die "file already exists"
    - echo $ACTION
    - echo $PACKAGE
    - echo $DIR
    - echo $FILE
    - |
      mkdir -p $OPS_PWD/tests/$PACKAGE
      mkdir -p $OPS_PWD/$DIR
    - |
      cat <<EOF >$OPS_PWD/$FILE
      def $ACTION(args):
        return { "output": "$ACTION" }
      EOF
    - |
      cat <<EOF >$OPS_PWD/$DIR/__main__.py
      #--kind python:default
      #--web true
      import $ACTION
      def main(args):
        return { "body": $ACTION.$ACTION(args) }
      EOF
    - |
      cat <<EOF >$OPS_PWD/tests/$PACKAGE/test_${ACTION}.py
      import sys 
      sys.path.append("$DIR")
      import $ACTION
      
      def test_$ACTION():
          res = $ACTION.$ACTION({})
          assert res["output"] == "$ACTION"
      EOF
    - |
      cat <<EOF >$OPS_PWD/tests/$PACKAGE/test_${ACTION}_int.py
      import os, requests as req
      def test_$ACTION():
          url = os.environ.get("OPSDEV_HOST") + "/api/my/$PACKAGE/$ACTION"
          res = req.get(url).json()
          assert res.get("output") == "$ACTION"
      EOF

  img:
    silent: true
    desc: build image
    vars:
      DIR: '{{.OPS_PWD}}/packages/{{._action_}}'
    env:
      NO_COLOR: "1"
    cmds:
    - |
      if {{._f}}
      then rm -f {{.DIR}}/Dockerfile
      fi
    - task: _img
      vars:
        DIR: '{{.DIR}}'
    - |
      if test -e "{{.DIR}}/Dockerfile"
      then 
        echo "Image Built. Metadata comment to use:"
        rg -N -- '--docker' "{{.DIR}}/Dockerfile"
      fi

  _img:
    silent: true
    desc: build image
    sources:
    - "{{.DIR}}/pyproject.toml"
    generates:
    - "{{.DIR}}/Dockerfile"
    cmds:
    - test -d "{{.DIR}}" || die "{{.DIR}} not found or not a directory"
    - test -n "$DOCKER_BUILDER" || die "create a docker builder in docker cloud and add to .env DOCKER_BUILDER"
    - test -n "$DOCKER_CUSTOM_RUNTIMES" || die "set DOCKER_CUSTOM_RUNTIMES to the custom runtime prefix"
    - |
      if test -f "{{.DIR}}/pyproject.toml"
      then
          DIR="{{.DIR}}"
          SHA="$(sha256sum "$DIR/pyproject.toml" | awk '{print substr($1, 0, 12)}')"
          KIND="$(awk '/--kind/ {print $2}' "$DIR/__main__.py")"
          FROM_TAG="$(bun findimg.js "$KIND" "$OPS_ROOT/runtimes.json")"
          FROM="${FROM_TAG%|*}"
          TAG="${FROM_TAG#*|}.${SHA}"
          #echo FROM=$FROM
          #echo TAG=$TAG
          if rg "$TAG" "{{.DIR}}/Dockerfile" >/dev/null
          then echo Image already built
          else
            # prepare the dockerfile
            cat <<EOF >"$DIR/Dockerfile"
      #--docker "$DOCKER_CUSTOM_RUNTIMES:$TAG"
      FROM $FROM
      USER root
      ADD pyproject.toml pyproject.toml
      RUN pip3 install .
      EOF
            if rg '^#Dockerfile:\s*(.*)' -or '$1' "$DIR/pyproject.toml" >_dockerfile
            then cat _dockerfile >>"$DIR/Dockerfile"
            fi
            echo "USER nobody" >>"$DIR/Dockerfile"
            cat "$DIR/Dockerfile"
            docker buildx build --platform linux/arm64,linux/amd64 --builder "$DOCKER_BUILDER" -t "$DOCKER_CUSTOM_RUNTIMES:$TAG" "$DIR" --push
            if test $? -eq 0
            then echo Built "$DOCKER_CUSTOM_RUNTIMES:$TAG"
            else  rm "$DIR/Dockerfile"
                  die "docker build failed, check the Dockerfile"
            fi
          fi
      else
        echo "no pyproject.toml found, skipping image build"
      fi



